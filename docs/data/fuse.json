{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"root","n":1},"1":{"v":"\nRoot of Dendron vault.\n\n### Books\n\n- [[Tech Books | books.tech.md]]\n\n###Python\n\n- [[Python specific commands | tech.python.cli.alembic]]\n\n### Postgres\n\n- [[Postgis extension | tech.postgres.postgis]]\n\n### GIS\n\n- [[GIS commands | cli.gis]]\n\n### Rust\n\n- [[Rust First Steps | tech.rust.md]]\n\n### Algorithms & Data Structures\n\nImplementations and analyses\n\n- [[Data Structure Visualizations | algo.ds.md]]\n\n### Linux\n\n- [[Linux | tech.linux]]\n\n### Kubernetes\n\n- [[Kubernetes | tech.kubernetes]]\n\n### Docker\n\n- [[Docker | tech.docker]]\n\n### CSS\n\n- [[CSS | tech.css]]\n\n### Web3\n\n- [[Web 3 | tech.web3.md]]\n\n### Git\n\n- [[Git | tech.git.md]]\n\n### Flutter\n\n- [[Flutter | tech.flutter.md]]\n\n### Web Assembly\n\n- [[Web Assembly | tech.wasm.md]]\n\n### Tools\n\n- [[Tools | tech.tools.md]]\n\n#### System Design\n\n- [[System Design | tech.system-design.md]]\n\n### People\n\n- [[Leslie Lamport | people.leslie-lamport.md]]\n- [[Paul Graham | people.paul-graham.md]]\n\n### Hobbies\n\n- [[Hobbies | hobbies.bicycling.md]]\n\n### Domains\n\n- [[Queuing Theory | domain.queuing-theory.md]]\n- [[Reversing | domain.reversing.md]]\n- [[Recruiting | domain.recruiting.md]]\n- [[Systems | domain.systems.md]]\n- [[Functional | domain.functional.md]]\n- [[Probability |  domain.probability.md]]\n- [[Category Theory | domain.category-theory.md]]\n- [[Relativity | domain.relativity.md]]\n- [[Game Theory | domain.game-theory.md]]\n- [[Personal Finance | domain.personal-finance.md]]\n- [[Calculus | domain.calculus.md]]\n- [[UX | domains.ux.md]]\n- [[Graphics | domain.graphics.md]]\n- [[Business | domain.business.md]]\n- [[Math | domain.math.md]]\n- [[Privacy | domain.privacy.md]]\n- [[Philosophy | domain.philosophy.md]]\n- [[Mental Health | domain.mental-health.md]]\n- [[Crypto | domain.crypto.md]]\n- [[Software Design | domain.software-design.md]]\n- [[Writing | domain.writing.md]]\n","n":0.077}}},{"i":2,"$":{"0":{"v":"Tech","n":1}}},{"i":3,"$":{"0":{"v":"Python","n":1}}},{"i":4,"$":{"0":{"v":"CLI","n":1}}},{"i":5,"$":{"0":{"v":"Alembic","n":1},"1":{"v":"\n### Show history\n\n`PYTHONPATH=. poetry run alembic history`\n\n### New model or update\n\n`PYTHONPATH=. alembic revision --autogenerate -m \"Comment relevant to change\"`\n","n":0.229}}},{"i":6,"$":{"0":{"v":"Postgres","n":1}}},{"i":7,"$":{"0":{"v":"Postgis","n":1},"1":{"v":"\n#### Geometry Input/Output Types\n\nIncludes `ST_GeomFrom*`\n\n- http://postgis.net/workshops/postgis-intro/geometries.html#geometry-input-and-output\n\n#### Functions\n\nIncludes `ST_As*` functions.\n\n- http://postgis.net/workshops/postgis-intro/geometries.html#function-list\n","n":0.316}}},{"i":8,"$":{"0":{"v":"Web3","n":1},"1":{"v":"\n#### Web3 — A vision for a decentralized web\n\n- https://blog.cloudflare.com/what-is-web3/\n","n":0.316}}},{"i":9,"$":{"0":{"v":"Wasm","n":1},"1":{"v":"\n#### Using WebAssembly threads from C, C++ and Rust\n\n- https://web.dev/webassembly-threads/\n","n":0.316}}},{"i":10,"$":{"0":{"v":"Tools","n":1},"1":{"v":"\n### CLI\n\n#### Logfile Navigator\n\n- https://lnav.org\n\n#### TapeX - Screen Recorder\n\n- https://tapex.app\n\n#### Zellij - terminal workspace\n\n- https://zellij.dev/about/\n- https://github.com/zellij-org/zellij\n\n#### Fig - Autocomplete for terminal\n\n- https://fig.io\n\n#### What is my IP address?\n\n- https://ifconfig.co\n- `curl ifconfig.co/`\n\n#### fzf - CLI fuzzy finder\n\n- https://github.com/junegunn/fzf\n- https://seb.jambor.dev/posts/improving-shell-workflows-with-fzf\n\n#### KeypassXC - password manager\n\n- https://keepassxc.org\n\n#### Starship - Cross-shell prompt\n\n- https://starship.rs\n\n#### O&O ShutUp10++:Free antispy tool for Windows 10 and 11\n\n- https://www.oo-software.com/en/shutup10\n\n### VSCode Extensions\n\n#### Code Graph\n\n- https://marketplace.visualstudio.com/items?itemName=YaobinOuyang.CodeAtlas\n\n### Browser Extensions\n\n#### Bypass Paywalls\n\n- https://github.com/iamadamdev/bypass-paywalls-chrome\n","n":0.122}}},{"i":11,"$":{"0":{"v":"System Design","n":0.707},"1":{"v":"\n#### How MDN’s autocomplete search works\n\n- https://hacks.mozilla.org/2021/08/mdns-autocomplete-search/\n\n#### PNG\n\n- https://compress-or-die.com/Understanding-PNG\n\n#### Scaling Monorepo Maintenance\n\n- https://github.blog/2021-04-29-scaling-monorepo-maintenance/\n\n#### Query Engines: Push vs. Pull\n\n- http://justinjaffray.com/query-engines-push-vs.-pull/\n\n#### Diving Deep on S3 Consistency\n\n- https://www.allthingsdistributed.com/2021/04/s3-strong-consistency.html\n\n#### Deep Dive in CORS\n\n- https://ieftimov.com/post/deep-dive-cors-history-how-it-works-best-practices/\n\n#### Demystifying programs that create programs, part 1: A disassembler\n\n- https://briancallahan.net/blog/20210407.html\n\n#### How to implement a hash table (in C)\n\n- https://benhoyt.com/writings/hash-table-in-c/\n\n#### A visual guide to SSH tunnels\n\n- https://robotmoon.com/ssh-tunnels/\n\n#### OS Projects\n\n- https://github.com/remzi-arpacidusseau/ostep-projects\n\n#### Nand2Tetris\n\n- https://www.nand2tetris.org\n\n#### Load balancing and its different types\n\n- https://www.wisdomgeek.com/development/software-architecture/load-balancing-and-its-different-types/\n","n":0.121}}},{"i":12,"$":{"0":{"v":"Rust","n":1},"1":{"v":"\n#### Rust First Steps\n\n- https://docs.microsoft.com/en-us/learn/paths/rust-first-steps/?WT.mc_id=academic-29077-cxa\n","n":0.447}}},{"i":13,"$":{"0":{"v":"Linux","n":1},"1":{"v":"\n#### Linux x86 Program Start Up or - How the heck do we get to `main()`?\n\n- http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\n","n":0.243}}},{"i":14,"$":{"0":{"v":"Kubernetes","n":1},"1":{"v":"\n#### Containers vs. Pods - Taking a Deeper Look\n\n- https://iximiuz.com/en/posts/containers-vs-pods/?utm_source=pocket_mylist\n","n":0.316}}},{"i":15,"$":{"0":{"v":"Git","n":1},"1":{"v":"\n#### The elements of git\n\n- https://cuddly-octo-palm-tree.com/posts/2021-09-19-git-elements/\n\n#### Git from the Bottom Up\n\n- https://jwiegley.github.io/git-from-the-bottom-up/\n\n#### Gitlet - how git works under the covers\n\n- http://gitlet.maryrosecook.com/docs/gitlet.html\n\n#### Commits are snapshots, not diffs\n\n- https://github.blog/2020-12-17-commits-are-snapshots-not-diffs/\n","n":0.192}}},{"i":16,"$":{"0":{"v":"Flutter","n":1},"1":{"v":"\n#### Flutter InAppWebView\n\n- https://hackernoon.com/introducing-inappwebview-plugin-for-flutter-zo3c3uah\n- https://inappwebview.dev/docs/\n- https://github.com/pichillilorenzo/flutter_inappwebview\n","n":0.408}}},{"i":17,"$":{"0":{"v":"Docker","n":1},"1":{"v":"\n#### Tips for Optimizing Docker Builds\n\n- https://circleci.com/blog/tips-for-optimizing-docker-builds/\n","n":0.378}}},{"i":18,"$":{"0":{"v":"CSS","n":1},"1":{"v":"\n#### High-level advice and guidelines for writing sane, manageable, scalable CSS\n\n- https://cssguidelin.es\n","n":0.289}}},{"i":19,"$":{"0":{"v":"People","n":1}}},{"i":20,"$":{"0":{"v":"Paul Graham","n":0.707},"1":{"v":"\n#### Keep Your Identity Small\n\n- http://www.paulgraham.com/identity.html\n","n":0.408}}},{"i":21,"$":{"0":{"v":"Leslie Lamport","n":0.707},"1":{"v":"\n#### State the Problem Before Describing the Solution\n\n- https://lamport.azurewebsites.net/pubs/state-the-problem.pdf\n\n#### How To Present a Paper\n\n- http://lamport.azurewebsites.net/pubs/howto.txt\n","n":0.258}}},{"i":22,"$":{"0":{"v":"Hobbies","n":1}}},{"i":23,"$":{"0":{"v":"Bicycling","n":1},"1":{"v":"\n#### 1 Hour Tune Up\n\n- https://youtu.be/fYaeVDnSK2c\n\n#### DIY bicycle service\n\n- https://youtu.be/fYaeVDnSK2c\n","n":0.316}}},{"i":24,"$":{"0":{"v":"Domains","n":1}}},{"i":25,"$":{"0":{"v":"UX","n":1},"1":{"v":"\n#### Web Vitals\n\n- https://web.dev/vitals/\n\n#### How Do I Make This Hard to Reuse\n\n- https://ozlabs.org/~rusty/index.cgi/tech/2008-03-30.html\n\n#### Collection of Human Interface and Software Design Guides\n\n- http://www.geofcrowl.com/blog/articles/2020/2/17/collection-higs/\n","n":0.213}}},{"i":26,"$":{"0":{"v":"Domain","n":1}}},{"i":27,"$":{"0":{"v":"Writing","n":1},"1":{"v":"\n#### Technical Writing - Google\n\n- https://developers.google.com/tech-writing/overview\n\n#### Architectural Decision Records\n\n- https://adr.github.io\n","n":0.316}}},{"i":28,"$":{"0":{"v":"Systems","n":1},"1":{"v":"\n#### A Closer Look at a Spin Lock\n\n- https://blog.regehr.org/archives/2173?utm_source=pocket_mylist\n\n#### Consistent Hashing for Dummies\n\n- https://www.franzoni.eu/consistent-hashing-for-dummies/\n\n#### Firecracker Internals\n\n- https://www.talhoffman.com/2021/07/18/firecracker-internals/?utm_source=pocket_mylist\n\n#### How to write a computer emulator\n\n- https://fms.komkon.org/EMUL8/HOWTO.html\n\n#### Operating Systems: From 0 to 1\n\n- https://tuhdo.github.io/os01/\n\n#### Gentle introduction to GPUs inner workings\n\n- https://vksegfault.github.io/posts/gentle-intro-gpu-inner-workings/\n\n#### Unit testing a TCP Stack\n\n- https://www.snellman.net/blog/archive/2015-07-09-unit-testing-a-tcp-stack/\n\n#### Let's code a TCP/IP stack\n\n- http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/\n\n#### Replicated Object Design\n\n- http://replicated.cc\n\n#### eBPF\n\n- https://brendangregg.com/blog/2021-07-03/how-to-add-bpf-observability.html\n\n#### An Introduction to Lockless Algorithms\n\n- https://lwn.net/Articles/844224\n\n### Thinking\n\n#### A Lifetime of Systems Thinking\n\n- https://thesystemsthinker.com/a-lifetime-of-systems-thinking\n\n### Compilers and Programming Languages\n\n[[Programming Languages | domain.systems.languages.md]]\n\n### Performance\n\n[[perf | domain.systems.perf.md]]\n\n### Distributed Systems\n\n- https://writings.stephenwolfram.com/2021/05/the-problem-of-distributed-consensus/\n- https://www.microsoft.com/en-us/research/publication/time-clocks-ordering-events-distributed-system/\n\n### RFCs\n\n- https://datatracker.ietf.org/doc/html/draft-main-magic-00\n","n":0.108}}},{"i":29,"$":{"0":{"v":"Perf","n":1},"1":{"v":"\n### Maps\n\n#### Getting to the bottom of web map performance\n\n- https://bdon.org/blog/web-map-performance/?utm_source=pocket_mylist\n","n":0.302}}},{"i":30,"$":{"0":{"v":"Languages","n":1},"1":{"v":"\n### ANTLR\n\n#### ANTLR in Typescript\n\n- https://blog.dangl.me/archive/creating-antlr-applications-in-typescript/?utm_source=pocket_mylist\n\n### LLVM\n\n#### Design Issues in LLVM IR\n\n- https://www.npopov.com/2021/06/02/Design-issues-in-LLVM-IR.html\n\n### AST\n\n#### Abstract Syntax Trree for Patching and Asessing Code Quality\n\n- https://engineering.soroco.com/abstract-syntax-tree-for-patching-code-and-assessing-code-quality/\n\n#### Types and Programming Languages\n\n- https://www.cis.upenn.edu/~bcpierce/tapl/\n\n### Compilers\n\n#### Resources for Amateur Compiler Writers\n\n- https://c9x.me/compile/bib/\n\n#### Static Program Analysis\n\n- https://cs.au.dk/~amoeller/spa/\n\n#### Loop alignment in .NET 6\n\n- https://devblogs.microsoft.com/dotnet/loop-alignment-in-net-6/\n\n#### How C++ Resolves a Function Call\n\n- https://preshing.com/20210315/how-cpp-resolves-a-function-call/\n\n#### TLB Hit Podcast\n\n- https://tlbh.it/index.html\n\n#### Design notes on inline caches in guile\n\n- https://wingolog.org/archives/2018/02/07/design-notes-on-inline-caches-in-guile\n","n":0.124}}},{"i":31,"$":{"0":{"v":"Software Design","n":0.707},"1":{"v":"\n#### Formal Methods of Software Design\n\n- http://www.cs.utoronto.ca/~hehner/FMSD/\n\n#### How to Design Programs, Second Edition\n\n- https://htdp.org/2018-01-06/Book/\n\n#### CS428: Real-world software engineering\n\n- http://cs428.cs.byu.edu\n\n#### The Missing Semester of Your CS Education\n\n- https://missing.csail.mit.edu\n","n":0.192}}},{"i":32,"$":{"0":{"v":"Reversing","n":1},"1":{"v":"\n#### Binary Reversing Methodologies\n\n- https://justintaft.com/blog/2021/11/07/binary-reversing-methodologies?utm_source=pocket_mylist\n","n":0.447}}},{"i":33,"$":{"0":{"v":"Relativity","n":1},"1":{"v":"\n#### Relativity: A Modern Primer\n\n- http://ramp-book.com\n","n":0.408}}},{"i":34,"$":{"0":{"v":"Recruiting","n":1},"1":{"v":"\n#### Master Foo and the Recruiter\n\n- http://www.catb.org/~esr/writings/unix-koans/recruiter.html?utm_source=pocket_mylist\n","n":0.378}}},{"i":35,"$":{"0":{"v":"Queuing Theory","n":0.707},"1":{"v":"\n#### What happens when you add a new teller?\n\n- https://www.johndcook.com/blog/2008/10/21/what-happens-when-you-add-a-new-teller/?utm_source=pocket_mylist\n","n":0.316}}},{"i":36,"$":{"0":{"v":"Probability","n":1},"1":{"v":"\n#### Monty-Hall Problem\n\n- https://behavioralscientist.org/steven-pinker-rationality-why-you-should-always-switch-the-monty-hall-problem-finally-explained/\n\n#### How Percentile Approximation Works and Why it's more useful than averages\n\n- https://blog.timescale.com/blog/how-percentile-approximation-works-and-why-its-more-useful-than-averages/?utm_source=pocket_mylist\n\n#### Norvig/Pytudes: A Concrete Introduction to Probability (using Python)\n\n- https://github.com/norvig/pytudes/blob/main/ipynb/Probability.ipynb\n","n":0.2}}},{"i":37,"$":{"0":{"v":"Privacy","n":1},"1":{"v":"\n#### Yes, your boss can read your Gmail drafts (and that's not all)\n\n- https://mashable.com/article/gmail-g-suite-privacy\n- https://freedom.press/training/blog/newsrooms-lets-talk-about-gsuite/\n","n":0.258}}},{"i":38,"$":{"0":{"v":"Philosophy","n":1},"1":{"v":"\n#### The Earth is Flat\n\n- https://bartoszmilewski.com/2018/01/11/the-earth-is-flat/\n\n### Laws\n\n#### Hofstadter's Law\n\n- https://en.m.wikipedia.org/wiki/Hofstadter's_law\n","n":0.316}}},{"i":39,"$":{"0":{"v":"Personal Finance","n":0.707},"1":{"v":"\n#### ProjectiFi - Model and Simulate your Financial Future\n\n- https://projectifi.io\n\n#### Spreadsheet Formulas for Personal Finance\n\n- https://bou.ke/blog/formulas/\n\n#### First-time Buyer Lorenz Curves\n\n- https://doodles.mountainmath.ca/blog/2020/09/28/first-time-buyer-lorenz-curves/\n\n#### The Ultimate Guide to Inflation\n\n- https://www.lynalden.com/inflation/\n","n":0.192}}},{"i":40,"$":{"0":{"v":"Mental Health","n":0.707},"1":{"v":"\n#### Happy Hackers - Stress in software engineering\n\n- https://docs.google.com/document/d/e/2PACX-1vQ6_KRG4zWHZX4mInXmYnFp_XdYdInjhZbaqG920cULDe68755ePM5w5ppSc93ckgJwD70nzQnab70y/pub\n","n":0.333}}},{"i":41,"$":{"0":{"v":"Math","n":1},"1":{"v":"\n#### Cognicull - Learning Site\n\nCognicull is a learning site that pursues \"ease of understanding\" and \"comfort\". It is designed so that knowledge of mathematics, natural science, and engineering can be gained easily.\n\n- https://cognicull.com/en\n\n[[Calculus | domain.calculus]]\n[[Category Theory | domain.category-theory]]\n","n":0.162}}},{"i":42,"$":{"0":{"v":"Graphics","n":1},"1":{"v":"\n#### 3D Math Primer for Graphics and Game Development\n\n- https://gamemath.com\n","n":0.316}}},{"i":43,"$":{"0":{"v":"Game Theory","n":0.707},"1":{"v":"\n#### COMS 4995: Incentives in Computer Science\n\n- http://www.cs.columbia.edu/~tr/s20/s20.html\n","n":0.354}}},{"i":44,"$":{"0":{"v":"Functional","n":1},"1":{"v":"\n#### Seemingly impossible functional programs\n\n- http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/\n","n":0.408}}},{"i":45,"$":{"0":{"v":"Crypto","n":1},"1":{"v":"\n#### All Crypto Whitepapers\n\n- https://www.allcryptowhitepapers.com\n","n":0.447}}},{"i":46,"$":{"0":{"v":"Category Theory","n":0.707},"1":{"v":"\n#### Category Theory Illustrated\n\n- https://boris-marinov.github.io/category-theory-illustrated/\n","n":0.447}}},{"i":47,"$":{"0":{"v":"Calculus","n":1},"1":{"v":"\n#### Calculus Made Easy\n\n- https://calculusmadeeasy.org\n","n":0.447}}},{"i":48,"$":{"0":{"v":"Business","n":1},"1":{"v":"\n#### Ideas Filter - Find your pre-validated idea to work on!\n\n- https://ideasfilter.com\n\n#### How to be an expert\n\n- https://headrush.typepad.com/creating_passionate_users/2006/03/how_to_be_an_ex.html\n","n":0.236}}},{"i":49,"$":{"0":{"v":"CLI","n":1}}},{"i":50,"$":{"0":{"v":"Gis","n":1},"1":{"v":"\n### OGR\n\n- OGR used to stand for OpenGIS Simple Features Reference Implementation.\n- See: https://trac.osgeo.org/gdal/wiki/FAQGeneral#WhatdoesOGRstandfor\n\n#### Shapfile to GeoJSON\n\n`ogr2ogr -f GeoJSON -t_srs crs:84 output.geojson input.shp`\n","n":0.209}}},{"i":51,"$":{"0":{"v":"Books","n":1}}},{"i":52,"$":{"0":{"v":"Tech","n":1},"1":{"v":"\n#### The Programmer's Brain\n\n- https://www.manning.com/books/the-programmers-brain\n\n#### How to Design Programs, Second Edition\n\n- https://htdp.org/2018-01-06/Book/\n\n#### 3D Math Primer for Graphics and Game Development\n\n- https://gamemath.com\n\n#### Software Design for Flexibility\n\n- https://mitpress.mit.edu/books/software-design-flexibility\n\n#### Logic Programming in Scheme\n\n- http://t3x.org/amk/\n\n#### Static Program Analysis\n\n- https://cs.au.dk/~amoeller/spa/spa.pdf\n\n#### Beej's Guide to Network Programming\n\n- https://beej.us/guide/bgnet/html/\n\n#### Operating Systems: Three Easy Pieces\n\n- https://pages.cs.wisc.edu/~remzi/OSTEP/\n\n#### The Elements of Computing Systems, Second Edition\n\n- https://mitpress.mit.edu/books/elements-computing-systems-second-edition\n\n#### Computer Graphics from Scratch\n\n- https://gabrielgambetta.com/computer-graphics-from-scratch/\n","n":0.129}}},{"i":53,"$":{"0":{"v":"Algo","n":1}}},{"i":54,"$":{"0":{"v":"Ds","n":1},"1":{"v":"\n#### Data Structure Visualizations\n\n- https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\n\n#### Bracket pair colorization 10,000x faster\n\nhttps://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization\n\n#### Verkle Trees\n\n- https://vitalik.ca/general/2021/06/18/verkle.html\n\n#### Bloom Filters\n\n- https://exampl.io/bloom-filters/\n\n#### E-graphs\n\n- https://www.philipzucker.com/egraph-1/\n\n#### Cache-Aware Lock-Free Concurrent Hash Tries\n\n- https://arxiv.org/abs/1709.06056\n\n#### HAT-Trie: A Cache-Conscious Trie-Based Data Structure For Strings\n\n- https://www.semanticscholar.org/paper/HAT-Trie:-A-Cache-Conscious-Trie-Based-Data-For-Askitis-Sinha/cbd461aebf6c8288d7afddbb30f7b727d798044b?p2df\n","n":0.174}}},{"i":55,"$":{"0":{"v":"Tutorial","n":1},"1":{"v":"\n## Welcome to Dendron\n\nThis guide will help you learn the basics of Dendron. You can also follow the Getting Started guides on our [website](https://wiki.dendron.so/notes/678c77d9-ef2c-4537-97b5-64556d6337f1.html).\n\nBy the end of the tutorial, you will also see how Dendron can help you manage your knowledge with super fast lookup, flexible hierarchies, and powerful linking.\n\nIf you close VS Code, you can always get back to this workspace by going to `File > Open Workspace` in VS Code's menu and then selecting your workspace file: `/Users/cbrady/Dendron/dendron.code-workspace`\n\nThe tutorial steps take about 10 minutes to complete. Let's get started!\n\n#### Steps to get started with Dendron:\n\n- [x] Install Dendron\n- [x] Create your first workspace\n- [ ] Complete the Tutorial (Cmd+Click on the links to go to each tutorial note)\n  - [ ] One: [[tutorial.1-navigation-basics]]\n\t- [ ] Two: [[tutorial.2-taking-notes]]\n\t- [ ] Three: [[tutorial.3-linking-your-notes]]\n\t- [ ] Four:  [[tutorial.4-rich-formatting]]\n\t- [ ] Five:  [[tutorial.5-conclusion]]\n\n#### Getting Help\n\n- If you get stuck, take a look at our full documentation on our [wiki](https://wiki.dendron.so/). Don't hesitate to reach out to our community of Dendrologists on [Discord](https://discord.com/invite/AE3NRw9) or message us on Twitter at [@dendronhq](https://twitter.com/dendronhq)\n\n---\n\n##### Icon Guide\n\n🌱 - Try out this feature now in the editor!\n💡 - Important to note\n","n":0.072}}},{"i":56,"$":{"0":{"v":"Conclusion","n":1},"1":{"v":"\n**Congratulations!** You've completed the Dendron Tutorial 🙌. With its fast lookup, flexible hierarchies, note linking, and rich formatting, Dendron provides you a way to manage knowledge for individuals and organizations alike.\n\nFrom here, you can start adding your notes to this workspace, or if you'd like to start fresh you can create a new workspace for your notes with the `Dendron: Initialize Workspace` Command.\n\n#### Join the community of Dendrologists\n\nDon't forget - join us on [Discord](https://discord.com/invite/AE3NRw9) to ask questions, suggest new features, or to discuss note-taking methodologies with fellow Dendrologists.\n\n^discord-block-ref\n\n#### Explore the full potential of Dendron\n\nThere is much more that Dendron offers. When you're ready, learn more about additional features that Dendron offers:\n\n- [ ] Import your existing notes from other sources like Obsidian, etc. with [Pods](https://wiki.dendron.so/notes/66727a39-d0a7-449b-a10d-f6c438185d7f.html)\n- [ ] [Publish](https://wiki.dendron.so/notes/861e4e48-dcc5-4813-a695-8940ba6e64d3.html) your notes to a website with just a few clicks. Our [Dendron Wiki Site](https://wiki.dendron.so/) is created in this way!\n- [ ] Check out our [Case Studies](https://wiki.dendron.so/notes/34ee4bcf-60e9-4031-a4c0-26113b5acb80.html) and [Workflows](https://wiki.dendron.so/notes/9313b845-d9bf-42c9-aad1-0da34794ce26.html) to see various ways Dendron is being used to organize knowledge.\n- [ ] Learn about more [Commands](https://wiki.dendron.so/notes/eea2b078-1acc-4071-a14e-18299fc28f47.html)\n\n- [ ] Check out our [Seed Bank](https://wiki.dendron.so/notes/6ff8cbb6-e4b8-449b-a967-277b76e4ecef.html) to pull down documentation for public topics.\n\nA complete set of our documentation can be found on our [Wiki Site](https://wiki.dendron.so/).\n\n---\n[[Tutorial Home Page| tutorial]]\n","n":0.07}}},{"i":57,"$":{"0":{"v":"Rich Formatting","n":0.707},"1":{"v":"\nDendron supports an extended Markdown syntax, which provides a lot of options for rich formatting. Take a look at some examples in this note to see what's possible.  Have the preview pane opened (`Dendron: Show Preview`) to see how these will get rendered.\n\n#### Markdown Formatting Options\n\n|Formatting|Example|\n|:---|:---:|\n|Bold|**Hello World**|\n|Italics|_Hello World_|\n|Strikethrough|~~Hello World~~|\n\n#### Images\n\n> 🌱 Copy any image onto your clipboard, and then use the `Paste Image` command while focused in your editor pane. This will automatically create a link for you and copy the file contents into the assets directory in your workspace.\n\nSample Image Link:\n![Dendron Logo](/assets/images/logo_small.png)\n\n#### Equations\n\nMath typesetting can be written through [Katex](https://wiki.dendron.so/notes/b1919663-cc48-4054-b0cf-4b26fe444907.html)\n\n$$\n\\int_{-\\infty}^\\infty f(x)dx\n$$\n\n#### Diagrams\n\nVarious types of diagrams are supported with the [mermaid](https://mermaid-js.github.io/mermaid/#/) visualization syntax.\n\n##### Flow Charts\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n```\n\n##### Sequence Diagrams\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n### Note References\n\nYou can link to a specific section of a different note and have the content in-lined into the current note.\n\n![[Join the community of Dendrologists|tutorial.5-conclusion#join-the-community-of-dendrologists:#^discord-block-ref]]\n\n[References Docs](https://wiki.dendron.so/notes/f1af56bb-db27-47ae-8406-61a98de6c78c.html#note-reference)\n\n### Next Steps\n\n- [[Conclude the Tutorial|tutorial.5-conclusion]]\n\n---\n[[Tutorial Home Page| tutorial]]\n","n":0.076}}},{"i":58,"$":{"0":{"v":"Linking Your Notes","n":0.577},"1":{"v":"\n### Links\n\nDendron supports links between your notes, which can help you organically connect your thoughts and build up a powerful and **personal** knowledge graph.\n\n> 🌱 To create a link, just start typing [[ and Dendron will show you a list of notes in your workspace that you can link to. Try it in the editor pane now.\n\nExample: [[tutorial]]\n\nTo navigate to the note in the link, you can just click on the link in the preview pane. In the editor pane, you can move the cursor into the link and hit `Cmd+Enter`.\n\nYou can switch back to the previous note with the tab switching shortcut (`Ctrl+Tab` on most systems).\n\n#### Backlinks\n\nTake a look at the backlinks panel on the bottom left section of your sidebar. The backlinks panel shows you all notes that have linked to the current note. This is useful for helping to establish context.\n\n![Backlinks](https://org-dendron-public-assets.s3.amazonaws.com/images/tutorial-backlinks.png)\n\n### Explore Your Knowledge Graph\n\n> 🌱 To get a visual representation of your notes, use the `Dendron: Show Note Graph` command.\n\nYou can explore the hierarchical organization of your notes and how your notes are linked together. We're continually working to improve this feature so keep on the lookout for new capabilities in the graph view in the future!\n\n![Graph View](https://org-dendron-public-assets.s3.amazonaws.com/images/tutorial-graph-view.png)\n\n### Next Steps\n\n- Tutorial Step 4: [[Rich Formatting|tutorial.4-rich-formatting]]\n- Try out some additional features of links:\n  - Create a note directly from a link - place your cursor inside this link `[[recipes.new-recipes-to-try]]`, hit `Cmd+ENTER`.\n  - Add an alias to a link to change how it shows in the preview. Example: [[My Alias|tutorial]]\n  - Relative Links - Link to a specific section of a page with a `#` suffix. Example: [[Additional Link Features|tutorial.3-links-and-graphs#additional-link-features]]\n  - Note References - Add a section from another note with its content inlined into the current note. [References Docs](https://wiki.dendron.so/notes/f1af56bb-db27-47ae-8406-61a98de6c78c.html#note-reference)\n\n---\n\n[[Tutorial Home Page| tutorial]]\n","n":0.058}}},{"i":59,"$":{"0":{"v":"Taking Notes","n":0.707},"1":{"v":"\n### Create a Note\n\nTo create a note, use `Cmd+L` to bring up Dendron's lookup. This is a shortcut for the `Dendron: Lookup Note` command.\n\n> 💡 The lookup command is the main way to interact with Dendron. It is used for both looking up your notes and creating new notes. When you do a lookup on a note that hasn't been created, Dendron will create it for you. Remember the `Cmd+L` shortcut.\n\n> 🌱 Try it yourself - bring up the lookup bar with Cmd+L. Type `recipes` and hit Enter. Afterward, you can use the `Ctrl+Tab` shortcut to get back to this note.\n\nThis should have created a note named `recipes.md`. Notes in Dendron are just plaintext markdown. They live in your file system and are portable across any platform, which makes it very easy to import/ export your notes and even to publish your notes to a hosted website. You can try to add some content to the body of your `recipes` note now.\n\nThe --- section at the top of each note is frontmatter. Frontmatter are custom attributes at the top of each markdown file. Dendron uses it to store metadata about each note for features like publishing. Don't modify the id attribute on the front matter.\n\n### Creating a hierarchy\n\nDendron uses flexible hierarchies to help you organize your notes. It's how people are able to manage tens of thousands of notes inside Dendron.\n\n> 🌱 To create a hierarchy, bring up lookup again `(Cmd+L)`. Type `recipes.vegetarian` and then press enter.\n\nYou have now created your first hierarchy. Hierarchies in Dendron are created by having a `.` delimiter in the file name. Take a look at the tree view in the side panel to see that the `vegetarian` note exists under the `recipes` hierarchy. You can also see in the Workspace panel that the note file is stored as `recipes.vegetarian.md`.\n\nYou can create a hierarchy at any level:\n\n> 🌱 Type the following into lookup and hit enter: `recipes.italian.desserts.tiramisu`\n\nYou'll notice in the tree view that there is now a `+` sign next to `italian` and `desserts`. The plus sign indicates that this note is a stub. A stub is a placeholder for a note that hasn't actually been created. Dendron uses stubs to avoid cluttering your file system with empty notes when creating hierarchies.\n\n![Tree View](https://org-dendron-public-assets.s3.amazonaws.com/images/tutorial-tree-view.png)\n\nFollowing this recipes example, you can try creating other notes that might be relevant. Some examples: `recipes.italian.appetizers`, `recipes.chinese`, `recipes.chinese.appetizers`, `recipes.ingredients.favorites`, `recipes.ingredients.shopping-list`. Hierarchies are flexible, and you can create them in whichever way works best for you. Dendron allows you to easily change the hierarchies later if you change your mind on how to organize your notes.\n\n### Finding Notes\n\nTo find notes, we use the same lookup interface that we used to create them.\n\n> 🌱 Open Lookup, and type `vege`. This will find your `recipes.vegetarian` note. Hit `Enter` to open that note.\n\nThe lookup uses fuzzy search which means you can type out partial results and still see the results. Searching with * wildcards is also supported.\n\nWhen combined with hierarchies, this fast lookup system enables you to find your notes very quickly, even if you have thousands of notes in your vaults.\n\nIf you want to search for content within the notes, you can use VS Code's built-in search tools with `Cmd+Shift+F`.\n\n### Next Steps\n\n- Tutorial Step 3: [[Linking Your Notes|tutorial.3-linking-your-notes]]\n\n---\n[[Tutorial Home Page| tutorial]]\n","n":0.043}}},{"i":60,"$":{"0":{"v":"Navigation Basics","n":0.707},"1":{"v":"\nLet's do a brief overview on how to navigate the Dendron UI.\n\n_Quick note on running commands in VS Code:_\n\n>If you're unfamiliar with VS Code, the command palette is used to quickly run commands, including the commands for Dendron. To bring up the command palette, use `Cmd+Shift+P` and start typing the command. Throughout the tutorial, if you see instructions telling you to run a command, remember to bring up the command palette and then type the command name to run it.\n\n![Basic UI](https://org-dendron-public-assets.s3.amazonaws.com/images/tutorial-layout.png)\n\n#### 1. Editor Pane\n\nThis is where you can write and edit your notes. Notes in Dendron are Markdown files.\n\n#### 2. Preview Pane\n\nThis shows the rendered Markdown of what your currently opened note looks like. If you close this pane, you can always bring it back by opening the command palette `Cmd+Shift+P` and running the `Dendron: Show Preview` command.\n\n>💡 The preview pane is read-only and cannot be used to edit notes. All editing must be done in the editor pane.\n\n#### 3. Dendron Workspace\n\nThis shows the files in your vault. A vault is where Dendron stores your markdown notes, assets, and some other helper files. Clicking on a note here will open it into the editor pane.\n\n#### 4. Outline\n\nShows an outline of the currently opened note. This observes the header levels in the Markdown of the note.\n\n#### 5. Tree View\n\nThis shows a hierarchical view of your notes, similar to how a folder structure would appear in your filesystem. You can also click in the tree view to navigate around your notes.\n\n#### 6. Backlinks\n\nThis shows a list of other notes that have links to the current note. More on links in Section 3 of the tutorial.\n\n> 💡 VS Code lets you reposition any of these windows as you'd like, so feel free to rearrange the windows into the view that works best for you!\n\n### Next Steps\n\n- You've completed navigation basics! You can go back to the [[tutorial]] page and check off the Navigation Basics checkbox to mark your progress.\n- Next is Tutorial Step 2: [[tutorial.2-taking-notes]]\n\n---\n[[Tutorial Home Page| tutorial]]\n","n":0.055}}}]}
